// ---------------------------------------------------------------------------------------------------------------------
// This file has been autamatically generated by a M3D Visual Studio Extension. Please avoid editing it, or be careful,
// the extension should do it for you.
// ---------------------------------------------------------------------------------------------------------------------

#include <string>
#include <vector>

#pragma region Managed code: Generated includes

//Include directives to be generated


#pragma endregion

#define EXPORT __declspec(dllexport) __cdecl
#define CAST_TO_ACTOR_MEMBER(X) static_cast<UserMemberFct_ptr>(X)

#pragma region Type definitions

namespace m3d
{
	class UFctSender;
	class UFctData;
	class Actor;
}

namespace m3dfw
{
	class UFctInfo;
}

typedef void(__cdecl * UserFct_ptr)(m3d::UFctSender&, const m3d::UFctData&);
typedef void(__cdecl m3d::Actor::* UserMemberFct_ptr)(m3d::UFctSender&, const m3d::UFctData&);
typedef void(__cdecl * VecUFct_ptr)(std::vector<m3dfw::UFctInfo>&);

namespace m3dfw
{
	class UFctInfo
	{
	public:

		UFctInfo() {}
		UFctInfo(const std::string & n, UserFct_ptr ptr) : name(n), pointer(ptr) {}

		std::string name;
		UserFct_ptr pointer;
	};

	class UMemberFctInfo
	{
	public:

		UMemberFctInfo() {}
		UMemberFctInfo(const std::string & n, UserMemberFct_ptr ptr) : name(n), pointer(ptr) {}

		std::string name;
		UserMemberFct_ptr pointer;
	};
}

namespace m3d
{
	//TODO: Write these classes

	class UFctSender {};
	class UFctData {};
}

#pragma endregion

//Fully-generated code

#pragma region Managed code: External function listing

namespace m3dfw
{
	void getFctPtrList(std::vector<m3dfw::UFctInfo> & data)
	{
		//Body to be generated
	}

	void getMemberFctPtrList(std::vector<m3dfw::UMemberFctInfo> & data)
	{
		//Body to be generated
	}
}


#pragma endregion